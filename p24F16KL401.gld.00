/*
 * Linker script for PIC24F16KL401
 * (c) Copyright 2013 Microchip Technology, Inc
 * Part support version 1.35.A(30-May-2018)
 *
 * This software is developed by Microchip Technology Inc. and its
 * subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are 
 * met:
 * 
 * 1.      Redistributions of source code must retain the above copyright
 *         notice, this list of conditions and the following disclaimer.
 * 2.      Redistributions in binary form must reproduce the above 
 *         copyright notice, this list of conditions and the following 
 *         disclaimer in the documentation and/or other materials provided 
 *         with the distribution.
 * 3.      Microchip's name may not be used to endorse or promote products
 *         derived from this software without specific prior written 
 *         permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


OUTPUT_ARCH("24F16KL401")
CRT0_STARTUP(crt0_standard.o)
CRT1_STARTUP(crt1_standard.o)

/*
 * Define how to startup, by default we initialize
 * everything as normal; change to crt_start_mode to
 * preserve preserved data on a restart
 *
 * Or define your own __crt_start_mode fucntion
 */
CRT_STARTMODE(crt_start_mode_normal)


OPTIONAL(-lpPIC24Fxxx)
OPTIONAL(-lfx)

/*
** Memory Regions
*/
MEMORY
{
  data (a!xr) : ORIGIN = 0x800, LENGTH = 0x400
  reset : ORIGIN = 0x0, LENGTH = 0x4
  ivt : ORIGIN = 0x4, LENGTH = 0xFC
  _reserved : ORIGIN = 0x100, LENGTH = 0x4
  aivt : ORIGIN = 0x104, LENGTH = 0xFC
  program (xr) : ORIGIN = 0x200, LENGTH = 0x2A00
  eedata : ORIGIN = 0x7FFE00, LENGTH = 0x200
  FBS : ORIGIN = 0xF80000, LENGTH = 0x2
  FGS : ORIGIN = 0xF80004, LENGTH = 0x2
  FOSCSEL : ORIGIN = 0xF80006, LENGTH = 0x2
  FOSC : ORIGIN = 0xF80008, LENGTH = 0x2
  FWDT : ORIGIN = 0xF8000A, LENGTH = 0x2
  FPOR : ORIGIN = 0xF8000C, LENGTH = 0x2
  FICD : ORIGIN = 0xF8000E, LENGTH = 0x2
}

__FBS = 0xF80000;
__FGS = 0xF80004;
__FOSCSEL = 0xF80006;
__FOSC = 0xF80008;
__FWDT = 0xF8000A;
__FPOR = 0xF8000C;
__FICD = 0xF8000E;
__NO_HANDLES = 1; /* Suppress handles on this device  */
__CODE_BASE = 0x200;
__CODE_LENGTH = 0x2A00;
__IVT_BASE = 0x4;
__AIVT_BASE = 0x104;

__DATA_BASE = 0x800;
__DATA_LENGTH = 0x400;


/*
** ==================== Section Map ======================
*/
SECTIONS
{
  /*
  ** ========== Program Memory ==========
  */



  /*
  ** Reset Instruction
  */
  .reset :
  {
        SHORT(ABSOLUTE(__reset));
        SHORT(0x04);
        SHORT((ABSOLUTE(__reset) >> 16) & 0x7F);
        SHORT(0);
  } >reset



  /*
  ** Interrupt Vector Tables
  **
  ** The primary and alternate tables are loaded
  ** here, between sections .reset and .text.
  ** Vector table source code appears below.
  */


  /*
  ** User Code and Library Code
  **
  ** This section must not be assigned to __CODE_BASE,
  ** because CodeGuard(tm) sections may be located there.
  **
  ** Note that input sections *(.text) are not mapped here.
  ** The best-fit allocator locates them, so that .text
  ** may flow around PSV sections as needed.
  */
  .text :
  {
        *(.init);
        *(.user_init);
        KEEP (*(.handle));
        KEEP (*(.isr*));
        *(.libc) *(.libm) *(.libdsp); /* keep together in this order */
        *(.lib*);
  } >program


  /*
  ** User-Defined Section in Program Memory
  **
  ** note: can specify an address using
  **       the following syntax:
  **
  **       usercode 0x1234 :
  **         {
  **           *(usercode);
  **         } >program
  */
  usercode :
  {
        *(usercode);
  } >program


  /*
  ** User-Defined Constants in Program Memory
  **
  ** For PSV type sections, the Load Memory Address (LMA)
  ** should be specified as follows:
  **
  **       userconst : AT(0x1234)
  **         {
  **           *(userconst);
  **         } >program
  **
  ** Note that mapping PSV sections in linker scripts
  ** is not generally recommended.
  **
  ** Because of page alignment restrictions, memory is
  ** often used more efficiently when PSV sections
  ** do not appear in the linker script.
  **
  ** For more information on memory allocation,
  ** please refer to chapter 10, 'Linker Processing'
  ** in the Assembler, Linker manual (DS51317).
  */


  /*
  ** Configuration Words
  */
  __FBS :
  { KEEP (*(__FBS.sec*)) } >FBS
  __FGS :
  { KEEP (*(__FGS.sec*)) } >FGS
  __FOSCSEL :
  { KEEP (*(__FOSCSEL.sec*)) } >FOSCSEL
  __FOSC :
  { KEEP (*(__FOSC.sec*)) } >FOSC
  __FWDT :
  { KEEP (*(__FWDT.sec*)) } >FWDT
  __FPOR :
  { KEEP (*(__FPOR.sec*)) } >FPOR
  __FICD :
  { KEEP (*(__FICD.sec*)) } >FICD






  /*
  ** =========== Data Memory ===========
  */


  /*
  ** ICD Debug Exec
  **
  ** This section provides optional storage for
  ** the ICD2 debugger. Define a global symbol
  ** named __ICD2RAM to enable ICD2. This section
  ** must be loaded at data address 0x800.
  */
  .icd __DATA_BASE (NOLOAD):
  {
    . += (DEFINED (__ICD2RAM) ? 0x50 : 0 );
  } > data


  /*
  ** Other sections in data memory are not explicitly mapped.
  ** Instead they are allocated according to their section
  ** attributes, which is most efficient.
  ** 
  ** If a specific arrangement of sections is required
  ** (other than what can be achieved using attributes)
  ** additional sections may be defined here. See chapter
  ** 10.5 in the MPLAB ASM30/LINK30 User's Guide (DS51317)
  ** for more information.
  */


  /*
  ** ========== Debug Info ==============
  */

  .comment 0 : { *(.comment) }

  /*
  ** DWARF-2
  */
  .debug_info 0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev 0 : { *(.debug_abbrev) }
  .debug_line 0 : { *(.debug_line) }
  .debug_frame 0 : { *(.debug_frame) }
  .debug_str 0 : { *(.debug_str) }
  .debug_loc 0 : { *(.debug_loc) }
  .debug_macinfo 0 : { *(.debug_macinfo) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_ranges 0 : { *(.debug_ranges) }
  .debug_aranges 0 : { *(.debug_aranges) }

} /* SECTIONS */

/*
** ================= End of Section Map ================
*/
/*
** ============== Equates for SFR Addresses =============
*/
 WREG0 = 0x0;
_WREG0 = 0x0;
 WREG1 = 0x2;
_WREG1 = 0x2;
 WREG2 = 0x4;
_WREG2 = 0x4;
 WREG3 = 0x6;
_WREG3 = 0x6;
 WREG4 = 0x8;
_WREG4 = 0x8;
 WREG5 = 0xA;
_WREG5 = 0xA;
 WREG6 = 0xC;
_WREG6 = 0xC;
 WREG7 = 0xE;
_WREG7 = 0xE;
 WREG8 = 0x10;
_WREG8 = 0x10;
 WREG9 = 0x12;
_WREG9 = 0x12;
 WREG10 = 0x14;
_WREG10 = 0x14;
 WREG11 = 0x16;
_WREG11 = 0x16;
 WREG12 = 0x18;
_WREG12 = 0x18;
 WREG13 = 0x1A;
_WREG13 = 0x1A;
 WREG14 = 0x1C;
_WREG14 = 0x1C;
 WREG15 = 0x1E;
_WREG15 = 0x1E;
 SPLIM = 0x20;
_SPLIM = 0x20;
 PCL = 0x2E;
_PCL = 0x2E;
 PCH = 0x30;
_PCH = 0x30;
 TBLPAG = 0x32;
_TBLPAG = 0x32;
 PSVPAG = 0x34;
_PSVPAG = 0x34;
 RCOUNT = 0x36;
_RCOUNT = 0x36;
 SR = 0x42;
_SR = 0x42;
_SRbits = 0x42;
 CORCON = 0x44;
_CORCON = 0x44;
_CORCONbits = 0x44;
 DISICNT = 0x52;
_DISICNT = 0x52;
 CNPD1 = 0x56;
_CNPD1 = 0x56;
_CNPD1bits = 0x56;
 CNPD2 = 0x58;
_CNPD2 = 0x58;
_CNPD2bits = 0x58;
 CNEN1 = 0x62;
_CNEN1 = 0x62;
_CNEN1bits = 0x62;
 CNEN2 = 0x64;
_CNEN2 = 0x64;
_CNEN2bits = 0x64;
 CNPU1 = 0x6E;
_CNPU1 = 0x6E;
_CNPU1bits = 0x6E;
 CNPU2 = 0x70;
_CNPU2 = 0x70;
_CNPU2bits = 0x70;
 INTCON1 = 0x80;
_INTCON1 = 0x80;
_INTCON1bits = 0x80;
 INTCON2 = 0x82;
_INTCON2 = 0x82;
_INTCON2bits = 0x82;
 IFS0 = 0x84;
_IFS0 = 0x84;
_IFS0bits = 0x84;
 IFS1 = 0x86;
_IFS1 = 0x86;
_IFS1bits = 0x86;
 IFS2 = 0x88;
_IFS2 = 0x88;
_IFS2bits = 0x88;
 IFS3 = 0x8A;
_IFS3 = 0x8A;
_IFS3bits = 0x8A;
 IFS4 = 0x8C;
_IFS4 = 0x8C;
_IFS4bits = 0x8C;
 IFS5 = 0x8E;
_IFS5 = 0x8E;
_IFS5bits = 0x8E;
 IEC0 = 0x94;
_IEC0 = 0x94;
_IEC0bits = 0x94;
 IEC1 = 0x96;
_IEC1 = 0x96;
_IEC1bits = 0x96;
 IEC2 = 0x98;
_IEC2 = 0x98;
_IEC2bits = 0x98;
 IEC3 = 0x9A;
_IEC3 = 0x9A;
_IEC3bits = 0x9A;
 IEC4 = 0x9C;
_IEC4 = 0x9C;
_IEC4bits = 0x9C;
 IEC5 = 0x9E;
_IEC5 = 0x9E;
_IEC5bits = 0x9E;
 IPC0 = 0xA4;
_IPC0 = 0xA4;
_IPC0bits = 0xA4;
 IPC1 = 0xA6;
_IPC1 = 0xA6;
_IPC1bits = 0xA6;
 IPC2 = 0xA8;
_IPC2 = 0xA8;
_IPC2bits = 0xA8;
 IPC3 = 0xAA;
_IPC3 = 0xAA;
_IPC3bits = 0xAA;
 IPC4 = 0xAC;
_IPC4 = 0xAC;
_IPC4bits = 0xAC;
 IPC5 = 0xAE;
_IPC5 = 0xAE;
_IPC5bits = 0xAE;
 IPC6 = 0xB0;
_IPC6 = 0xB0;
_IPC6bits = 0xB0;
 IPC7 = 0xB2;
_IPC7 = 0xB2;
_IPC7bits = 0xB2;
 IPC9 = 0xB6;
_IPC9 = 0xB6;
_IPC9bits = 0xB6;
 IPC12 = 0xBC;
_IPC12 = 0xBC;
_IPC12bits = 0xBC;
 IPC16 = 0xC4;
_IPC16 = 0xC4;
_IPC16bits = 0xC4;
 IPC18 = 0xC8;
_IPC18 = 0xC8;
_IPC18bits = 0xC8;
 IPC20 = 0xCC;
_IPC20 = 0xCC;
_IPC20bits = 0xCC;
 INTTREG = 0xE0;
_INTTREG = 0xE0;
_INTTREGbits = 0xE0;
 TMR1 = 0x100;
_TMR1 = 0x100;
 PR1 = 0x102;
_PR1 = 0x102;
 T1CON = 0x104;
_T1CON = 0x104;
_T1CONbits = 0x104;
 TMR2 = 0x106;
_TMR2 = 0x106;
 PR2 = 0x108;
_PR2 = 0x108;
 T2CON = 0x10A;
_T2CON = 0x10A;
_T2CONbits = 0x10A;
 TMR3 = 0x10C;
_TMR3 = 0x10C;
 T3GCON = 0x10E;
_T3GCON = 0x10E;
_T3GCONbits = 0x10E;
 T3CON = 0x110;
_T3CON = 0x110;
_T3CONbits = 0x110;
 TMR4 = 0x112;
_TMR4 = 0x112;
 PR4 = 0x114;
_PR4 = 0x114;
 T4CON = 0x116;
_T4CON = 0x116;
_T4CONbits = 0x116;
 CCPTMRS0 = 0x13C;
_CCPTMRS0 = 0x13C;
_CCPTMRS0bits = 0x13C;
 CCP1CON = 0x190;
_CCP1CON = 0x190;
_CCP1CONbits = 0x190;
 ECCP1CON = 0x190;
_ECCP1CON = 0x190;
_ECCP1CONbits = 0x190;
 CCPR1L = 0x192;
_CCPR1L = 0x192;
 CCPR1H = 0x194;
_CCPR1H = 0x194;
 ECCP1DEL = 0x196;
_ECCP1DEL = 0x196;
_ECCP1DELbits = 0x196;
 PWM1CON = 0x196;
_PWM1CON = 0x196;
_PWM1CONbits = 0x196;
 ECCP1AS = 0x198;
_ECCP1AS = 0x198;
_ECCP1ASbits = 0x198;
 PSTR1CON = 0x19A;
_PSTR1CON = 0x19A;
_PSTR1CONbits = 0x19A;
 CCP2CON = 0x19C;
_CCP2CON = 0x19C;
_CCP2CONbits = 0x19C;
 CCPR2L = 0x19E;
_CCPR2L = 0x19E;
 CCPR2H = 0x1A0;
_CCPR2H = 0x1A0;
 CCP3CON = 0x1A8;
_CCP3CON = 0x1A8;
_CCP3CONbits = 0x1A8;
 CCPR3L = 0x1AA;
_CCPR3L = 0x1AA;
 CCPR3H = 0x1AC;
_CCPR3H = 0x1AC;
 SPI1BUF = 0x200;
_SPI1BUF = 0x200;
_SPI1BUFbits = 0x200;
 SSP1BUF = 0x200;
_SSP1BUF = 0x200;
_SSP1BUFbits = 0x200;
 SSP1CON1 = 0x202;
_SSP1CON1 = 0x202;
_SSP1CON1bits = 0x202;
 SSP1CON2 = 0x204;
_SSP1CON2 = 0x204;
_SSP1CON2bits = 0x204;
 SSP1CON3 = 0x206;
_SSP1CON3 = 0x206;
_SSP1CON3bits = 0x206;
 SSP1STAT = 0x208;
_SSP1STAT = 0x208;
_SSP1STATbits = 0x208;
 I2C1ADD = 0x20A;
_I2C1ADD = 0x20A;
_I2C1ADDbits = 0x20A;
 SSP1ADD = 0x20A;
_SSP1ADD = 0x20A;
_SSP1ADDbits = 0x20A;
 I2C1MSK = 0x20C;
_I2C1MSK = 0x20C;
_I2C1MSKbits = 0x20C;
 SSP1MSK = 0x20C;
_SSP1MSK = 0x20C;
_SSP1MSKbits = 0x20C;
 SPI2BUF = 0x210;
_SPI2BUF = 0x210;
_SPI2BUFbits = 0x210;
 SSP2BUF = 0x210;
_SSP2BUF = 0x210;
_SSP2BUFbits = 0x210;
 SSP2CON1 = 0x212;
_SSP2CON1 = 0x212;
_SSP2CON1bits = 0x212;
 SSP2CON2 = 0x214;
_SSP2CON2 = 0x214;
_SSP2CON2bits = 0x214;
 SSP2CON3 = 0x216;
_SSP2CON3 = 0x216;
_SSP2CON3bits = 0x216;
 SSP2STAT = 0x218;
_SSP2STAT = 0x218;
_SSP2STATbits = 0x218;
 I2C2ADD = 0x21A;
_I2C2ADD = 0x21A;
_I2C2ADDbits = 0x21A;
 SSP2ADD = 0x21A;
_SSP2ADD = 0x21A;
_SSP2ADDbits = 0x21A;
 I2C2MSK = 0x21C;
_I2C2MSK = 0x21C;
_I2C2MSKbits = 0x21C;
 SSP2MSK = 0x21C;
_SSP2MSK = 0x21C;
_SSP2MSKbits = 0x21C;
 U1MODE = 0x220;
_U1MODE = 0x220;
_U1MODEbits = 0x220;
 U1STA = 0x222;
_U1STA = 0x222;
_U1STAbits = 0x222;
 U1TXREG = 0x224;
_U1TXREG = 0x224;
_U1TXREGbits = 0x224;
 U1RXREG = 0x226;
_U1RXREG = 0x226;
_U1RXREGbits = 0x226;
 U1BRG = 0x228;
_U1BRG = 0x228;
 U2MODE = 0x230;
_U2MODE = 0x230;
_U2MODEbits = 0x230;
 U2STA = 0x232;
_U2STA = 0x232;
_U2STAbits = 0x232;
 U2TXREG = 0x234;
_U2TXREG = 0x234;
_U2TXREGbits = 0x234;
 U2RXREG = 0x236;
_U2RXREG = 0x236;
_U2RXREGbits = 0x236;
 U2BRG = 0x238;
_U2BRG = 0x238;
 TRISA = 0x2C0;
_TRISA = 0x2C0;
_TRISAbits = 0x2C0;
 PORTA = 0x2C2;
_PORTA = 0x2C2;
_PORTAbits = 0x2C2;
 LATA = 0x2C4;
_LATA = 0x2C4;
_LATAbits = 0x2C4;
 ODCA = 0x2C6;
_ODCA = 0x2C6;
_ODCAbits = 0x2C6;
 TRISB = 0x2C8;
_TRISB = 0x2C8;
_TRISBbits = 0x2C8;
 PORTB = 0x2CA;
_PORTB = 0x2CA;
_PORTBbits = 0x2CA;
 LATB = 0x2CC;
_LATB = 0x2CC;
_LATBbits = 0x2CC;
 ODCB = 0x2CE;
_ODCB = 0x2CE;
_ODCBbits = 0x2CE;
 PADCFG1 = 0x2FC;
_PADCFG1 = 0x2FC;
_PADCFG1bits = 0x2FC;
 ADC1BUF0 = 0x300;
_ADC1BUF0 = 0x300;
 ADC1BUF1 = 0x302;
_ADC1BUF1 = 0x302;
 AD1CON1 = 0x320;
_AD1CON1 = 0x320;
_AD1CON1bits = 0x320;
 AD1CON2 = 0x322;
_AD1CON2 = 0x322;
_AD1CON2bits = 0x322;
 AD1CON3 = 0x324;
_AD1CON3 = 0x324;
_AD1CON3bits = 0x324;
 AD1CHS = 0x328;
_AD1CHS = 0x328;
_AD1CHSbits = 0x328;
 AD1CSSL = 0x330;
_AD1CSSL = 0x330;
_AD1CSSLbits = 0x330;
 ANCFG = 0x4DE;
_ANCFG = 0x4DE;
_ANCFGbits = 0x4DE;
 ANSA = 0x4E0;
_ANSA = 0x4E0;
_ANSAbits = 0x4E0;
 ANSELA = 0x4E0;
_ANSELA = 0x4E0;
_ANSELAbits = 0x4E0;
 ANSB = 0x4E2;
_ANSB = 0x4E2;
_ANSBbits = 0x4E2;
 ANSELB = 0x4E2;
_ANSELB = 0x4E2;
_ANSELBbits = 0x4E2;
 CMSTAT = 0x630;
_CMSTAT = 0x630;
_CMSTATbits = 0x630;
 CVRCON = 0x632;
_CVRCON = 0x632;
_CVRCONbits = 0x632;
 CM1CON = 0x634;
_CM1CON = 0x634;
_CM1CONbits = 0x634;
 CM2CON = 0x636;
_CM2CON = 0x636;
_CM2CONbits = 0x636;
 RCON = 0x740;
_RCON = 0x740;
_RCONbits = 0x740;
 OSCCON = 0x742;
_OSCCON = 0x742;
_OSCCONbits = 0x742;
 OSCCONL = 0x742;
_OSCCONL = 0x742;
 OSCCONH = 0x743;
_OSCCONH = 0x743;
 CLKDIV = 0x744;
_CLKDIV = 0x744;
_CLKDIVbits = 0x744;
 OSCTUN = 0x748;
_OSCTUN = 0x748;
_OSCTUNbits = 0x748;
 REFOCON = 0x74E;
_REFOCON = 0x74E;
_REFOCONbits = 0x74E;
 HLVDCON = 0x756;
_HLVDCON = 0x756;
_HLVDCONbits = 0x756;
 NVMCON = 0x760;
_NVMCON = 0x760;
_NVMCONbits = 0x760;
 NVMKEY = 0x766;
_NVMKEY = 0x766;
_NVMKEYbits = 0x766;
 ULPWCON = 0x768;
_ULPWCON = 0x768;
_ULPWCONbits = 0x768;
 PMD1 = 0x770;
_PMD1 = 0x770;
_PMD1bits = 0x770;
 PMDIS1 = 0x770;
_PMDIS1 = 0x770;
_PMDIS1bits = 0x770;
 PMD2 = 0x772;
_PMD2 = 0x772;
_PMD2bits = 0x772;
 PMDIS2 = 0x772;
_PMDIS2 = 0x772;
_PMDIS2bits = 0x772;
 PMD3 = 0x774;
_PMD3 = 0x774;
_PMD3bits = 0x774;
 PMDIS3 = 0x774;
_PMDIS3 = 0x774;
_PMDIS3bits = 0x774;
 PMD4 = 0x776;
_PMD4 = 0x776;
_PMD4bits = 0x776;
 PMDIS4 = 0x776;
_PMDIS4 = 0x776;
_PMDIS4bits = 0x776;
/*
** ======= Base Addresses for Various Peripherals and ACC ======
*/
 UART1 = 0x220;
_UART1 = 0x220;
 UART2 = 0x230;
_UART2 = 0x230;
